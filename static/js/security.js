// Security Utilities Module\nconst Security = {\n    // HTML escaping function\n    escapeHtml(text) {\n        if (typeof text !== 'string') return '';\n        const div = document.createElement('div');\n        div.textContent = text;\n        return div.innerHTML;\n    },\n\n    // Input sanitization\n    sanitizeInput(input, maxLength = 1000) {\n        if (typeof input !== 'string') return '';\n        return input.trim().substring(0, maxLength);\n    },\n\n    // Email validation\n    isValidEmail(email) {\n        const emailRegex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/;\n        return emailRegex.test(email) && email.length <= 254;\n    },\n\n    // Password strength validation\n    validatePassword(password) {\n        const minLength = 8;\n        const hasUpperCase = /[A-Z]/.test(password);\n        const hasLowerCase = /[a-z]/.test(password);\n        const hasNumbers = /\\d/.test(password);\n        const hasSpecialChar = /[!@#$%^&*(),.?\":{}|<>]/.test(password);\n        \n        const errors = [];\n        if (password.length < minLength) errors.push(`At least ${minLength} characters`);\n        if (!hasUpperCase) errors.push('One uppercase letter');\n        if (!hasLowerCase) errors.push('One lowercase letter');\n        if (!hasNumbers) errors.push('One number');\n        if (!hasSpecialChar) errors.push('One special character');\n        \n        return {\n            isValid: errors.length === 0,\n            errors: errors,\n            strength: this.calculatePasswordStrength(password)\n        };\n    },\n\n    calculatePasswordStrength(password) {\n        let score = 0;\n        if (password.length >= 8) score++;\n        if (password.length >= 12) score++;\n        if (/[A-Z]/.test(password)) score++;\n        if (/[a-z]/.test(password)) score++;\n        if (/\\d/.test(password)) score++;\n        if (/[!@#$%^&*(),.?\":{}|<>]/.test(password)) score++;\n        if (password.length >= 16) score++;\n        \n        if (score <= 2) return 'weak';\n        if (score <= 4) return 'medium';\n        return 'strong';\n    },\n\n    // Rate limiting\n    rateLimiter: new Map(),\n    \n    checkRateLimit(key, maxRequests = 10, windowMs = 60000) {\n        const now = Date.now();\n        const windowStart = now - windowMs;\n        \n        if (!this.rateLimiter.has(key)) {\n            this.rateLimiter.set(key, []);\n        }\n        \n        const requests = this.rateLimiter.get(key);\n        const recentRequests = requests.filter(time => time > windowStart);\n        \n        if (recentRequests.length >= maxRequests) {\n            return false;\n        }\n        \n        recentRequests.push(now);\n        this.rateLimiter.set(key, recentRequests);\n        return true;\n    },\n\n    // CSRF token management\n    csrfToken: null,\n    \n    async getCSRFToken() {\n        if (!this.csrfToken) {\n            try {\n                const response = await fetch(`${CONFIG.BACKEND_URL}/csrf-token`);\n                if (response.ok) {\n                    const data = await response.json();\n                    this.csrfToken = data.csrf_token;\n                }\n            } catch (error) {\n                console.warn('CSRF token fetch failed:', error);\n            }\n        }\n        return this.csrfToken;\n    },\n\n    // Content Security Policy violation handler\n    handleCSPViolation(event) {\n        console.error('CSP Violation:', {\n            blockedURI: event.blockedURI,\n            violatedDirective: event.violatedDirective,\n            originalPolicy: event.originalPolicy\n        });\n    },\n\n    // Initialize security features\n    init() {\n        document.addEventListener('securitypolicyviolation', this.handleCSPViolation);\n        \n        // Prevent right-click in production\n        if (window.location.hostname !== 'localhost') {\n            document.addEventListener('contextmenu', (e) => e.preventDefault());\n        }\n        \n        // Prevent dev tools shortcuts in production\n        if (window.location.hostname !== 'localhost') {\n            document.addEventListener('keydown', (e) => {\n                if (e.key === 'F12' || \n                    (e.ctrlKey && e.shiftKey && e.key === 'I') ||\n                    (e.ctrlKey && e.shiftKey && e.key === 'C') ||\n                    (e.ctrlKey && e.key === 'U')) {\n                    e.preventDefault();\n                }\n            });\n        }\n        \n        this.setupClipboardSecurity();\n    },\n\n    setupClipboardSecurity() {\n        let clipboardTimeout;\n        document.addEventListener('copy', () => {\n            if (clipboardTimeout) clearTimeout(clipboardTimeout);\n            clipboardTimeout = setTimeout(() => {\n                navigator.clipboard.writeText('').catch(() => {});\n            }, 30000);\n        });\n    },\n\n    // Secure random string generation\n    generateSecureRandom(length = 32) {\n        const array = new Uint8Array(length);\n        crypto.getRandomValues(array);\n        return Array.from(array, byte => byte.toString(16).padStart(2, '0')).join('');\n    }\n};\n\n// Initialize security features\nif (document.readyState === 'loading') {\n    document.addEventListener('DOMContentLoaded', () => Security.init());\n} else {\n    Security.init();\n}